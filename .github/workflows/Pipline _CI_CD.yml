name: Pipline _CI_CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
jobs:
  test:
    env:
      BUILD_CONFIG: 'Release'
      SOLUTION: 'back-end/UnitTest.sln'
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.x

      - name: Restore dependencies
        run: dotnet restore
        
      - name: Test
        run: dotnet test  --configuration $BUILD_CONFIG --logger "trx;LogFileName=test-results.trx" || true

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: DotNET Tests
          path: "**/test-results.trx"
          reporter: dotnet-trx
          #fail-on-error: true
  sonarcloud:
    name: buld and sonarcloud
    runs-on:  windows-latest
    needs: [test]
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"hamzabely2_pot_shop_official-back-end" /o:"hamzabely2" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
           dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-and-deploy:
        runs-on: self-hosted
        needs: [sonarcloud]
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        steps:
          - name: Pull Data from main branch
            uses: actions/checkout@v2
          - name: Build Docker images
            run: 
              docker build -t pot_shop_official_back_end .
          ###################
          - name: Save Docker image to a tar file
            run: |
              docker save -o pot_shop_official_back_end.tar pot_shop_official_back_end
          ###################
          - name: Transfer Docker image to remote machine
            run: |
              sshpass -p ${{ secrets.PASSWORD }} scp -o StrictHostKeyChecking=no pot_shop_official_back_end.tar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:back/
            env:
              SSH_AUTH_SOCK: /tmp/ssh_agent.sock
              SSHPASS: ${{ secrets.PASSWORD }}
          ###################
          - name: load Docker image
            run: |
              echo "${{ secrets.PASSWORD }}" | sshpass -e ssh -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'sudo -S docker load -i back/pot_shop_official_back_end.tar'
            env:
              SSHPASS: ${{ secrets.PASSWORD }}
           ###################
          - name: Start Docker Container
            run: |
              sshpass -p ${{ secrets.PASSWORD }} ssh -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'docker-compose -f  back/docker-compose.yml up -d'
          ###################
          - name: Remove Docker Images
            run: |
             sshpass -p ${{ secrets.PASSWORD }} ssh -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} 'sudo docker image prune -a -f'
            env:
              SSH_AUTH_SOCK: /tmp/ssh_agent.sock
              SSHPASS: ${{ secrets.PASSWORD }}
